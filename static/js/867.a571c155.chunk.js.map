{"version":3,"file":"static/js/867.a571c155.chunk.js","mappings":"iTAKMA,EAAc,SAAC,GAA6C,IAAD,IAA3CC,KAAOC,EAAoC,EAApCA,QAASC,EAA2B,EAA3BA,MAAQC,EAAmB,EAAnBA,SACpCC,EAAWH,GAAWC,EACtBG,EAAaD,EAAWE,EAAAA,EAAAA,MAAU,GAExC,OACI,iBAAKC,UAAWD,EAAAA,EAAAA,YAAgB,IAAMD,EAAtC,WACI,yBACKF,KAEL,yBACKC,IAAY,0BAAOF,UAMvBM,EAAW,SAACC,GACrB,IAAOC,EAA6BD,EAA7BC,MAAgBC,GAAaF,EAAtBT,MAAd,OAAoCS,EAApC,IACA,OAAO,SAACV,GAAD,kBAAiBU,GAAjB,cAAwB,uCAAcC,GAAWC,QAE/CC,EAAQ,SAACH,GAClB,IAAOC,EAA6BD,EAA7BC,MAAgBC,GAAaF,EAAtBT,MAAd,OAAoCS,EAApC,IACA,OAAO,SAACV,GAAD,kBAAiBU,GAAjB,cAAwB,oCAAWC,GAAWC,QAG5CE,EAAc,SAACC,EAA4BC,EAAcC,EAAmBC,GAA2C,IAA3BR,EAA0B,uDAAlB,GAAIS,EAAc,uDAAP,GACxH,OACI,4BACI,SAAC,KAAD,QACIJ,YAAaA,EACbC,KAAMA,EACNE,UAAWA,EACXE,SAAUH,GACNP,IANZ,IAOQS,O,6HCvCHE,EAAW,SAACC,GACrB,IAAIA,EAGJ,MAAO,qB,UCHX,EAA4B,6BAA5B,EAAsE,8BAAtE,EAA+G,4B,SCkCzGC,GAAiBC,EAAAA,EAAAA,GAA4C,CAACC,KAAM,SAAnDD,ECxBsF,SAAC,GAAqC,IAApCE,EAAmC,EAAnCA,aAAavB,EAAsB,EAAtBA,MAAMwB,EAAgB,EAAhBA,WAE9H,OACI,kBAAMC,SAAUF,EAAclB,UAAWqB,EAAzC,WAEI,4CAECf,EAAAA,EAAAA,IAAY,QAAS,QAAS,CAACO,GAAWR,EAAAA,GAAO,CAACiB,KAAM,QAAS,KACjEhB,EAAAA,EAAAA,IAAY,WAAY,WAAY,CAACO,GAAWR,EAAAA,GAAO,CAACiB,KAAM,YAAa,KAC5E,gBAAKtB,UAAWqB,EAAhB,UACKf,EAAAA,EAAAA,IAAY,KAAM,aAAc,GAAID,EAAAA,GAAO,CAACiB,KAAM,YAAa,iBAGnEH,IAAc,gBAAKI,IAAKJ,EAAYK,IAAK,eACzCL,IAAcb,EAAAA,EAAAA,IAAY,qBAAsB,UAAW,CAACO,GAAWR,EAAAA,IAGpEV,IACA,gBAAKK,UAAWD,EAAAA,EAAAA,iBAAhB,SAAqCJ,KAEzC,0BACI,8CDKhB,EA3B4B,WAExB,IAAMwB,GAAaM,EAAAA,EAAAA,KAAyC,SAAAC,GAAK,OAAIA,EAAMC,KAAKR,cAC1ES,GAASH,EAAAA,EAAAA,KAAmC,SAAAC,GAAK,OAAIA,EAAMC,KAAKC,UAEhEC,GAAWC,EAAAA,EAAAA,MAMjB,OAAIF,GACO,SAAC,KAAD,CAAUG,GAAI,cAIrB,gBAAK/B,UAAWD,EAAhB,UACI,SAACgB,EAAD,CACIK,SAXK,SAACY,GACdH,GAASI,EAAAA,EAAAA,IAAMD,EAASE,MAAOF,EAASG,SAAUH,EAASI,WAAYJ,EAASK,WAWxElB,WAAYA,Q,mBE5B5B,KAAgB,YAAc,mCAAmC,MAAQ,6BAA6B,iBAAmB","sources":["components/Common/components/FormsControls/FormsControls.tsx","Utils/Validators/Validators.ts","webpack://social_network_ts/./src/components/Login/loginPage.module.scss?4a50","components/Login/LoginPage.tsx","components/Login/LoginForm.tsx","webpack://social_network_ts/./src/components/Common/components/FormsControls/FormsControls.module.css?d98d"],"sourcesContent":["import React from \"react\";\r\nimport {Field} from \"redux-form\";\r\nimport s from \"./FormsControls.module.css\"\r\n\r\n\r\nconst FormControl = ({meta: {touched, error}, children}: any) => {\r\n    const hasError = touched && error;\r\n    const styleError = hasError ? s.error : \"\"\r\n\r\n    return (\r\n        <div className={s.formControl + \" \" + styleError}>\r\n            <div>\r\n                {children}\r\n            </div>\r\n            <div>\r\n                {hasError && <span>{error}</span>}\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport const Textarea = (props: any) => {\r\n    const {input, meta, ...restProps} = props;\r\n    return <FormControl {...props}><textarea {...input} {...restProps}/></FormControl>\r\n}\r\nexport const Input = (props: any) => {\r\n    const {input, meta, ...restProps} = props;\r\n    return <FormControl {...props}><input {...input} {...restProps}/></FormControl>\r\n}\r\n\r\nexport const createField = (placeholder: string | null, name: string, validators: any[], component: any, props = {}, text = \"\") => {\r\n    return (\r\n        <div>\r\n            <Field\r\n                placeholder={placeholder}\r\n                name={name}\r\n                component={component}\r\n                validate={validators}\r\n                {...props}\r\n            /> {text}\r\n        </div>\r\n    )\r\n}\r\n","export const required = (value: string | number) => {\r\n    if (value) {\r\n        return undefined;\r\n    }\r\n    return \"Field is required\";\r\n}\r\nexport const maxLengthCreator = (maxLength: number) => (value: any) => {\r\n    if (value.length > maxLength) {\r\n        return `Max length is ${maxLength} symbols`;\r\n    }\r\n    return undefined;\r\n}\r\nexport const minLengthCreator = (minLength: number) => (value: any) => {\r\n    if (value.length < minLength) {\r\n        return `Min length is ${minLength} symbols`;\r\n    }\r\n    return undefined;\r\n}","// extracted by mini-css-extract-plugin\nexport default {\"loginPage\":\"loginPage_loginPage__gNSdA\",\"loginBlock\":\"loginPage_loginBlock__J6uEt\",\"checkbox\":\"loginPage_checkbox__otETD\"};","import React from 'react';\r\nimport {reduxForm} from \"redux-form\";\r\nimport {Navigate} from \"react-router-dom\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {AppStateType} from \"../../Redux/redux-store\";\r\nimport {login} from \"../../Redux/Reducers/auth-reducer\";\r\nimport {LoginForm, LoginFormPropsType} from \"./LoginForm\";\r\nimport s from \"./loginPage.module.scss\"\r\n\r\n\r\nconst LoginPage: React.FC = () => {\r\n\r\n    const captchaUrl = useSelector<AppStateType, string | null>(state => state.auth.captchaUrl)\r\n    const isAuth = useSelector<AppStateType, boolean>(state => state.auth.isAuth)\r\n\r\n    const dispatch = useDispatch()\r\n\r\n    const onSubmit = (formData: FormDataType) => {\r\n        dispatch(login(formData.email, formData.password, formData.rememberMe, formData.captcha))\r\n    }\r\n\r\n    if (isAuth) {\r\n        return <Navigate to={'/profile'}/>\r\n    }\r\n\r\n    return (\r\n        <div className={s.loginPage}>\r\n            <LoginReduxForm\r\n                onSubmit={onSubmit}\r\n                captchaUrl={captchaUrl}\r\n            />\r\n        </div>\r\n    );\r\n};\r\n\r\nconst LoginReduxForm = reduxForm<FormDataType, LoginFormPropsType>({form: \"Login\"})(LoginForm)\r\n\r\nexport default LoginPage\r\n\r\n// TYPES\r\nexport type FormDataType = {\r\n    email: string\r\n    password: string\r\n    rememberMe: boolean\r\n    captcha: string\r\n}\r\n","import React from \"react\";\r\nimport {InjectedFormProps} from \"redux-form\";\r\nimport {createField, Input} from \"../Common/components/FormsControls/FormsControls\";\r\nimport {required} from \"../../Utils/Validators/Validators\";\r\nimport {FormDataType} from \"./LoginPage\";\r\nimport s from \"../Common/components/FormsControls/FormsControls.module.css\";\r\nimport style from \"./loginPage.module.scss\";\r\n\r\nexport type LoginFormPropsType = {\r\n    captchaUrl: string | null\r\n}\r\nexport const LoginForm: React.FC<InjectedFormProps<FormDataType, LoginFormPropsType> & LoginFormPropsType> = ({handleSubmit,error,captchaUrl}) => {\r\n\r\n    return (\r\n        <form onSubmit={handleSubmit} className={style.loginBlock}>\r\n\r\n            <h1>Social Network</h1>\r\n\r\n            {createField(\"Email\", \"email\", [required], Input, {type: \"text\"}, \"\")}\r\n            {createField(\"Password\", \"password\", [required], Input, {type: \"password\"}, \"\")}\r\n            <div className={style.checkbox}>\r\n                {createField(null, \"rememberMe\", [], Input, {type: \"checkbox\"}, \"Remember me\")}\r\n            </div>\r\n\r\n            {captchaUrl && <img src={captchaUrl} alt={'captchaUrl'}/>}\r\n            {captchaUrl && createField(\"Symbols from image\", \"captcha\", [required], Input)}\r\n\r\n            {\r\n                error &&\r\n                <div className={s.formSummaryError}>{error}</div>\r\n            }\r\n            <div>\r\n                <button>Login</button>\r\n            </div>\r\n        </form>\r\n    );\r\n}","// extracted by mini-css-extract-plugin\nexport default {\"formControl\":\"FormsControls_formControl__S2iyO\",\"error\":\"FormsControls_error__NBuHK\",\"formSummaryError\":\"FormsControls_formSummaryError__LZTot\"};"],"names":["FormControl","meta","touched","error","children","hasError","styleError","s","className","Textarea","props","input","restProps","Input","createField","placeholder","name","validators","component","text","validate","required","value","LoginReduxForm","reduxForm","form","handleSubmit","captchaUrl","onSubmit","style","type","src","alt","useSelector","state","auth","isAuth","dispatch","useDispatch","to","formData","login","email","password","rememberMe","captcha"],"sourceRoot":""}