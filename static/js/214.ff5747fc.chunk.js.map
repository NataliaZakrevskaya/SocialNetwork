{"version":3,"file":"static/js/214.ff5747fc.chunk.js","mappings":"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","sources":["webpack://social_network_ts/./src/components/Dialogs/Dialogs.module.scss?d037","components/Dialogs/DialogItem/DialogItem.tsx","components/Dialogs/Message/Message.tsx","components/Dialogs/AddMessageForm/AddMessageForm.tsx","components/Dialogs/Dialogs.tsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"dialogsPage\":\"Dialogs_dialogsPage__c7nRv\",\"dialogsPageBlock\":\"Dialogs_dialogsPageBlock__P8TiP\",\"dialogs\":\"Dialogs_dialogs__Hqm6l\",\"dialogsItems\":\"Dialogs_dialogsItems__Zvg5Y\",\"dialog\":\"Dialogs_dialog__cy492\",\"dialogImg\":\"Dialogs_dialogImg__Dz6cG\",\"activeDialog\":\"Dialogs_activeDialog__JH3Gv\",\"messagesField\":\"Dialogs_messagesField__HA4bd\",\"message\":\"Dialogs_message__FOFXX\",\"isAuthMessages\":\"Dialogs_isAuthMessages__u7fzS\",\"fieldWithoutMessages\":\"Dialogs_fieldWithoutMessages__btTVf\",\"addMessageFormBlock\":\"Dialogs_addMessageFormBlock__aMPKW\",\"addMessageFormContainer\":\"Dialogs_addMessageFormContainer__HS9zB\",\"addMessageForm\":\"Dialogs_addMessageForm__NNeTk\",\"textField\":\"Dialogs_textField__qgxSJ\",\"errorField\":\"Dialogs_errorField__x3d92\",\"errorSpan\":\"Dialogs_errorSpan__6KJXL\"};","import React from 'react'\r\nimport s from '../Dialogs.module.scss'\r\n\r\n\r\n\r\nconst DialogItem = (props: DialogsType) => {\r\n\r\n    const showMessages = () => {\r\n        props.showMessages(props.id)\r\n    }\r\n\r\n    return (\r\n        <div className={props.id !== props.activeUserID ? s.dialog : `${s.dialog} ${s.activeDialog}`} onClick={showMessages}>\r\n            <img className={s.dialogImg}\r\n                 src={props.avatar}\r\n                 alt={\"dialogProfilePhoto\"}/>\r\n            <span>{props.name}</span>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default DialogItem;\r\n\r\n// TYPES\r\ntype DialogsType = {\r\n    name: string\r\n    id: number\r\n    avatar: string\r\n    activeUserID: number | null\r\n    showMessages: (userID: number) => void\r\n}","import React from 'react'\r\nimport s from '../Dialogs.module.scss'\r\n\r\n\r\n\r\nconst Message = (props: MessageType) => {\r\n\r\n    return (\r\n        <div>\r\n                <span className={props.isAuth ? `${s.message} ${s.isAuthMessages}` : s.message}>{props.message}</span>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Message;\r\n\r\n// TYPES\r\ntype MessageType = {\r\n    id: string\r\n    message: string\r\n    isAuth: boolean\r\n}","import React, {ChangeEvent, useState, KeyboardEvent} from \"react\";\r\nimport s from \"../Dialogs.module.scss\";\r\n\r\n\r\nexport const AddMessageForm = (props: AddMessageFormPropsType) => {\r\n\r\n    const [messageText, setMessageText] = useState<string>('')\r\n    const [error, setError] = useState<boolean>(false)\r\n\r\n    const onEnter = (e: KeyboardEvent<HTMLTextAreaElement>) => {\r\n        if(e.code === 'Enter') validate()\r\n\r\n    }\r\n    const validate = () => messageText.trim().length > 0 ? addMessage(messageText) : setError(true)\r\n    const addMessage = (messageText: string) => {\r\n        props.addNewMessage(props.userID, messageText)\r\n        setMessageText('')\r\n    }\r\n    const onChangeHandler = (e: ChangeEvent<HTMLTextAreaElement>) => {\r\n        setMessageText(e.currentTarget.value)\r\n        setError(false)\r\n    }\r\n\r\n    return (\r\n        <div className={s.addMessageFormBlock}>\r\n            <div className={s.addMessageFormContainer}>\r\n                <div className={s.addMessageForm}>\r\n                <textarea\r\n                    value={messageText}\r\n                    placeholder={\"Enter your message...\"}\r\n                    className={!error ? s.textField : `${s.textField} ${s.errorField}`}\r\n                    onChange={onChangeHandler}\r\n                    onKeyPress={onEnter}\r\n                />\r\n                    {error && <span className={s.errorSpan}>Min length is 1 symbol</span>}\r\n                </div>\r\n                <button disabled={!props.userID} onClick={validate} >Send</button>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\n// TYPES\r\ntype AddMessageFormPropsType = {\r\n    userID: number | null\r\n    addNewMessage: (userID: number | null, newMessage: string) => void\r\n}\r\n","import React, {useState} from 'react';\r\nimport {Navigate} from \"react-router-dom\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport DialogItem from \"./DialogItem/DialogItem\";\r\nimport Message from \"./Message/Message\";\r\nimport {AddMessageForm} from \"./AddMessageForm/AddMessageForm\";\r\nimport {AppStateType} from \"../../Redux/redux-store\";\r\nimport {DialogsInitialStateType, dialogsReducerActions} from \"../../Redux/Reducers/dialogs-reducer\";\r\nimport s from './Dialogs.module.scss';\r\n\r\n\r\nconst DialogsPage = () => {\r\n\r\n\r\n    const [activeUserID, setActiveUserID] = useState<number | null>(null)\r\n    const isAuth = useSelector<AppStateType, boolean>(state => state.auth.isAuth)\r\n    const state = useSelector<AppStateType, DialogsInitialStateType>(state => state.messagesPage)\r\n    const dispatch = useDispatch()\r\n\r\n    let messagesElements;\r\n    const showMessages = (userId: number) => {\r\n        setActiveUserID(userId)\r\n    }\r\n\r\n    const dialogsElements = state.dialogs.map(d => <DialogItem name={d.name} key={d.id} id={d.id} avatar={d.avatar}\r\n                    showMessages={showMessages}\r\n                    activeUserID={activeUserID}/>);\r\n\r\n\r\n    if (activeUserID !== null) {\r\n        messagesElements = state.messages[activeUserID].map(m => <Message key={m.id} id={m.id} message={m.message}\r\n                                                                          isAuth={m.isAuth}/>)\r\n    }\r\n\r\n\r\n    const addNewMessage = (userID: number | null, newMessage: string) => {\r\n        if (userID) {\r\n            dispatch(dialogsReducerActions.sendMessage(userID, newMessage));\r\n        }\r\n    };\r\n\r\n    if (!isAuth) {\r\n        return <Navigate to='/login'/>\r\n    }\r\n\r\n    return (\r\n        <div className={s.dialogsPage}>\r\n            <div className={s.dialogsPageBlock}>\r\n                <div className={s.dialogs}>\r\n                    <div className={s.dialogsItems}>\r\n                        {dialogsElements}\r\n                    </div>\r\n                    <div className={activeUserID ? s.messagesField : s.fieldWithoutMessages}>\r\n                        {activeUserID ? messagesElements : <span>Select a chat to start messaging</span>}\r\n                    </div>\r\n                </div>\r\n                <AddMessageForm addNewMessage={addNewMessage} userID={activeUserID}/>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\nexport default DialogsPage;"],"names":["props","className","id","activeUserID","s","onClick","showMessages","src","avatar","alt","name","isAuth","message","AddMessageForm","useState","messageText","setMessageText","error","setError","validate","trim","length","addMessage","addNewMessage","userID","value","placeholder","onChange","e","currentTarget","onKeyPress","code","disabled","messagesElements","setActiveUserID","useSelector","state","auth","messagesPage","dispatch","useDispatch","userId","dialogsElements","dialogs","map","d","messages","m","newMessage","dialogsReducerActions","to"],"sourceRoot":""}