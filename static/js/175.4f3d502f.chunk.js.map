{"version":3,"file":"static/js/175.4f3d502f.chunk.js","mappings":"8LACA,EAA8B,6BAA9B,EAA8E,kCAA9E,EAA0H,yBAA1H,EAA4J,wBAA5J,EAAmM,8BAAnM,EAA6O,2BAA7O,EAAuR,8BAAvR,EAAqU,+BAArU,EAA2X,sCAA3X,EAA2a,yBAA3a,EAAqd,gCAArd,EAA2gB,qCAA3gB,EAA0kB,yCAA1kB,EAAooB,gCAApoB,EAAgrB,2BAAhrB,EAAwtB,4BAAxtB,EAAgwB,2B,SCsBhwB,EAhBmB,SAACA,GAMhB,OACI,iBAAKC,UAAWD,EAAME,KAAOF,EAAMG,aAAeC,EAAWA,EAAgBC,QAL5D,WACjBL,EAAMM,aAAaN,EAAME,KAIzB,WACI,gBAAKD,UAAWG,EACXG,IAAKP,EAAMQ,OACXC,IAAK,wBACV,0BAAOT,EAAMU,WCAzB,EATgB,SAACV,GAEb,OACI,0BACQ,iBAAMC,UAAWD,EAAMW,OAASP,EAAmBA,EAAnD,SAA+DJ,EAAMY,aCTxEC,EAAiB,SAACb,GAE3B,OAAsCc,EAAAA,EAAAA,UAAiB,IAAvD,eAAOC,EAAP,KAAoBC,EAApB,KACA,GAA0BF,EAAAA,EAAAA,WAAkB,GAA5C,eAAOG,EAAP,KAAcC,EAAd,KAOMC,EAAa,SAACJ,GAChBf,EAAMoB,cAAcpB,EAAMqB,OAAQN,GAClCC,EAAe,KAOnB,OACI,gBAAKf,UAAWG,EAAhB,UACI,iBAAKH,UAAWG,EAAhB,WACI,iBAAKH,UAAWG,EAAhB,WACA,qBACIkB,MAAOP,EACPQ,YAAa,wBACbtB,UAAYgB,EAAsBb,EAAdA,EACpBoB,SAbQ,SAACC,GACrBT,EAAeS,EAAEC,cAAcJ,OAC/BJ,GAAS,MAaID,IAAS,iBAAMhB,UAAWG,EAAjB,wCAEd,mBAAQuB,UAAW3B,EAAMqB,OAAQhB,QA1B5B,WAETU,EAAYa,OAAS,EAAIT,EAAWJ,GAAeG,GAAS,IAwBxD,wB,6BC4BhB,EApDoB,WAGhB,IAKIW,EALJ,GAAwCf,EAAAA,EAAAA,UAAwB,MAAhE,eAAOX,EAAP,KAAqB2B,EAArB,KACMC,GAAWC,EAAAA,EAAAA,MACXrB,GAASsB,EAAAA,EAAAA,KAAmC,SAAAC,GAAK,OAAIA,EAAMC,KAAKxB,UAChEuB,GAAQD,EAAAA,EAAAA,KAAmD,SAAAC,GAAK,OAAIA,EAAME,gBAG1E9B,EAAe,SAAC+B,GAClBP,EAAgBO,IAGdC,EAAkBJ,EAAMK,QAAQC,KAAI,SAAAC,GAAC,OAAI,SAAC,EAAD,CAAY/B,KAAM+B,EAAE/B,KAAiBR,GAAIuC,EAAEvC,GAAIM,OAAQiC,EAAEjC,OAC7CF,aAAcA,EACdH,aAAcA,GAFKsC,EAAEvC,OAK3D,OAAjBC,IACA0B,EAAmBK,EAAMQ,SAASvC,GAAcqC,KAAI,SAAAG,GAAC,OAAI,SAAC,EAAD,CAAoBzC,GAAIyC,EAAEzC,GAAIU,QAAS+B,EAAE/B,QAChCD,OAAQgC,EAAEhC,QADLgC,EAAEzC,QAW7E,OAAKS,GAKD,gBAAKV,UAAWG,EAAhB,UACI,iBAAKH,UAAWG,EAAhB,WACI,iBAAKH,UAAWG,EAAhB,WACI,gBAAKH,UAAWG,EAAhB,SACKkC,KAEL,gBAAKrC,UAAS,UAAKE,EAAeC,EAAkBA,GAApD,SACKD,EAAe0B,GAAmB,qEAG3C,SAAChB,EAAD,CAAgBO,cArBN,SAACC,EAAuBuB,GACtCvB,GACAU,EAASc,EAAAA,GAAAA,YAAkCxB,EAAQuB,KAmBDvB,OAAQlB,UAdvD,SAAC,KAAD,CAAU2C,GAAG","sources":["webpack://social_network_ts/./src/components/Dialogs/Dialogs.module.css?1b2e","components/Dialogs/DialogItem/DialogItem.tsx","components/Dialogs/Message/Message.tsx","components/Dialogs/AddMessageForm/AddMessageForm.tsx","components/Dialogs/Dialogs.tsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"dialogsPage\":\"Dialogs_dialogsPage__UVfNu\",\"dialogsPageBlock\":\"Dialogs_dialogsPageBlock__OZDBP\",\"dialogs\":\"Dialogs_dialogs__rnZdM\",\"dialog\":\"Dialogs_dialog__mKYrY\",\"activeDialog\":\"Dialogs_activeDialog__0GBt8\",\"dialogImg\":\"Dialogs_dialogImg__IxzTb\",\"dialogsItems\":\"Dialogs_dialogsItems__fojws\",\"messagesField\":\"Dialogs_messagesField__2waU9\",\"fieldWithoutMessages\":\"Dialogs_fieldWithoutMessages__SdlNH\",\"message\":\"Dialogs_message__Nh7CW\",\"isAuthMessages\":\"Dialogs_isAuthMessages__-DSsM\",\"addMessageFormBlock\":\"Dialogs_addMessageFormBlock__JqSH1\",\"addMessageFormContainer\":\"Dialogs_addMessageFormContainer__WW9XF\",\"addMessageForm\":\"Dialogs_addMessageForm__iqx6U\",\"textField\":\"Dialogs_textField__Qa3j+\",\"errorField\":\"Dialogs_errorField__R73-8\",\"errorSpan\":\"Dialogs_errorSpan__EwKAD\"};","import React from 'react'\r\nimport s from './../Dialogs.module.css'\r\nimport {NavLink} from \"react-router-dom\";\r\nimport dialogProfileImg from './dilaogProfileImg.png'\r\n\r\n\r\n\r\nconst DialogItem = (props: DialogsType) => {\r\n\r\n    const showMessages = () => {\r\n        props.showMessages(props.id)\r\n    }\r\n\r\n    return (\r\n        <div className={props.id !== props.activeUserID ? s.dialog : s.activeDialog} onClick={showMessages}>\r\n            <img className={s.dialogImg}\r\n                 src={props.avatar}\r\n                 alt={\"dialogProfilePhoto\"}/>\r\n            <span>{props.name}</span>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default DialogItem;\r\n\r\n// TYPES\r\ntype DialogsType = {\r\n    name: string\r\n    id: number\r\n    avatar: string\r\n    activeUserID: number | null\r\n    showMessages: (userID: number) => void\r\n}","import React from 'react'\r\nimport s from './../Dialogs.module.css'\r\n\r\ntype MessageType = {\r\n    id: string\r\n    message: string\r\n    isAuth: boolean\r\n}\r\n\r\nconst Message = (props: MessageType) => {\r\n\r\n    return (\r\n        <div>\r\n                <span className={props.isAuth ? s.isAuthMessages : s.message}>{props.message}</span>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Message;","import React, {ChangeEvent, useState} from \"react\";\r\nimport s from \"../Dialogs.module.css\";\r\n\r\n\r\nexport const AddMessageForm = (props: AddMessageFormPropsType) => {\r\n\r\n    const [messageText, setMessageText] = useState<string>('')\r\n    const [error, setError] = useState<boolean>(false)\r\n\r\n    const validate = () => {\r\n        {\r\n            messageText.length > 0 ? addMessage(messageText) : setError(true)\r\n        }\r\n    }\r\n    const addMessage = (messageText: string) => {\r\n        props.addNewMessage(props.userID, messageText)\r\n        setMessageText('')\r\n    }\r\n    const onChangeHandler = (e: ChangeEvent<HTMLTextAreaElement>) => {\r\n        setMessageText(e.currentTarget.value)\r\n        setError(false)\r\n    }\r\n\r\n    return (\r\n        <div className={s.addMessageFormBlock}>\r\n            <div className={s.addMessageFormContainer}>\r\n                <div className={s.addMessageForm}>\r\n                <textarea\r\n                    value={messageText}\r\n                    placeholder={\"Enter your message...\"}\r\n                    className={!error ? s.textField : s.errorField}\r\n                    onChange={onChangeHandler}\r\n                />\r\n                    {error && <span className={s.errorSpan}>Min length is 1 symbol</span>}\r\n                </div>\r\n                <button disabled={!props.userID} onClick={validate}>Send</button>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\n// TYPES\r\ntype AddMessageFormPropsType = {\r\n    userID: number | null\r\n    addNewMessage: (userID: number | null, newMessage: string) => void\r\n}\r\n","import React, {useState} from 'react'\r\nimport s from './Dialogs.module.css'\r\nimport DialogItem from \"./DialogItem/DialogItem\";\r\nimport Message from \"./Message/Message\";\r\nimport {AddMessageForm} from \"./AddMessageForm/AddMessageForm\";\r\nimport {Navigate} from \"react-router-dom\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {AppStateType} from \"../../Redux/redux-store\";\r\nimport {DialogsInitialStateType, dialogsReducerActions} from \"../../Redux/dialogs-reducer\";\r\n\r\n\r\nconst DialogsPage = () => {\r\n\r\n\r\n    const [activeUserID, setActiveUserID] = useState<number | null>(null)\r\n    const dispatch = useDispatch()\r\n    const isAuth = useSelector<AppStateType, boolean>(state => state.auth.isAuth)\r\n    const state = useSelector<AppStateType, DialogsInitialStateType>(state => state.messagesPage)\r\n\r\n    let messagesElements;\r\n    const showMessages = (userId: number) => {\r\n        setActiveUserID(userId)\r\n    }\r\n\r\n    const dialogsElements = state.dialogs.map(d => <DialogItem name={d.name} key={d.id} id={d.id} avatar={d.avatar}\r\n                                                               showMessages={showMessages}\r\n                                                               activeUserID={activeUserID}/>);\r\n\r\n\r\n    if (activeUserID !== null) {\r\n        messagesElements = state.messages[activeUserID].map(m => <Message key={m.id} id={m.id} message={m.message}\r\n                                                                          isAuth={m.isAuth}/>)\r\n    }\r\n\r\n\r\n    const addNewMessage = (userID: number | null, newMessage: string) => {\r\n        if (userID) {\r\n            dispatch(dialogsReducerActions.sendMessage(userID, newMessage));\r\n        }\r\n    };\r\n\r\n    if (!isAuth) {\r\n        return <Navigate to='/login'/>\r\n    }\r\n\r\n    return (\r\n        <div className={s.dialogsPage}>\r\n            <div className={s.dialogsPageBlock}>\r\n                <div className={s.dialogs}>\r\n                    <div className={s.dialogsItems}>\r\n                        {dialogsElements}\r\n                    </div>\r\n                    <div className={`${activeUserID ? s.messagesField : s.fieldWithoutMessages}`}>\r\n                        {activeUserID ? messagesElements : <span>Select a chat to start messaging</span>}\r\n                    </div>\r\n                </div>\r\n                <AddMessageForm addNewMessage={addNewMessage} userID={activeUserID}/>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\nexport default DialogsPage;"],"names":["props","className","id","activeUserID","s","onClick","showMessages","src","avatar","alt","name","isAuth","message","AddMessageForm","useState","messageText","setMessageText","error","setError","addMessage","addNewMessage","userID","value","placeholder","onChange","e","currentTarget","disabled","length","messagesElements","setActiveUserID","dispatch","useDispatch","useSelector","state","auth","messagesPage","userId","dialogsElements","dialogs","map","d","messages","m","newMessage","dialogsReducerActions","to"],"sourceRoot":""}