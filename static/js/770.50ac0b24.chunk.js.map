{"version":3,"file":"static/js/770.50ac0b24.chunk.js","mappings":"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","sources":["webpack://social_network_ts/./src/components/Common/Paginator/Paginator.module.css?308c","components/Common/Paginator/Paginator.tsx","webpack://social_network_ts/./src/components/Users/User/User.module.css?cfea","components/Users/User/User.tsx","webpack://social_network_ts/./src/components/Users/Users.module.css?b9d0","Redux/Selectors/users-selectors.tsx","webpack://social_network_ts/./src/components/Users/UsersSearchForm/UsersSearchForm.module.css?3d75","components/Users/UsersSearchForm/UsersSearchForm.tsx","components/Users/Users.tsx","components/Users/UsersPage.tsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"paginator\":\"Paginator_paginator__vr0UM\",\"selectedPage\":\"Paginator_selectedPage__op-V6\"};","import React, {useState} from 'react'\r\nimport s from \"./Paginator.module.css\";\r\n\r\n\r\nexport const Paginator = ({\r\n                              totalItemsCount,\r\n                              pageSize,\r\n                              currentPage,\r\n                              onPageChanged,\r\n                              portionSize = 10\r\n                          }: PaginatorPropsType) => {\r\n    let pagesCount = Math.ceil(totalItemsCount / pageSize);\r\n    let pages = [];\r\n    for (let i = 1; i <= pagesCount; i++) {\r\n        pages.push(i);\r\n    }\r\n\r\n    let portionCount = Math.ceil(pagesCount / portionSize);\r\n    let [portionNumber, setPortionNumber] = useState(1);\r\n    let leftPortionPageNumber = (portionNumber - 1) * portionSize + 1;\r\n    let rightPortionPageNumber = portionNumber * portionSize;\r\n\r\n    return (\r\n        <div className={s.paginator}>\r\n            {portionNumber > 1 &&\r\n                <button onClick={() => {\r\n                    setPortionNumber(portionNumber - 1)\r\n                }}>◀</button>\r\n            }\r\n\r\n            {pages\r\n                .filter(p => p >= leftPortionPageNumber && p <= rightPortionPageNumber)\r\n                .map((p) => {\r\n                    return <span\r\n                        key={p}\r\n                        className={(currentPage) === p ? s.selectedPage : \"\"}\r\n                        onClick={(e) => {\r\n                            onPageChanged(p)\r\n                        }}\r\n                    >{p}</span>\r\n                })}\r\n            {portionCount > portionNumber &&\r\n                <button onClick={() => {\r\n                    setPortionNumber(portionNumber + 1)\r\n                }}>▶</button>\r\n            }\r\n        </div>\r\n    )\r\n}\r\n\r\ntype PaginatorPropsType = {\r\n    totalItemsCount: number\r\n    pageSize: number\r\n    currentPage: number\r\n    portionSize: number\r\n    onPageChanged: (pageNumber: number) => void\r\n}\r\n","// extracted by mini-css-extract-plugin\nexport default {\"user\":\"User_user__A-L+3\",\"userInfo\":\"User_userInfo__66Bfp\",\"userName\":\"User_userName__zV-cG\",\"userStatus\":\"User_userStatus__FknIt\",\"userPhoto\":\"User_userPhoto__971Bn\",\"unFollowBtn\":\"User_unFollowBtn__r8Ffw\",\"followBtn\":\"User_followBtn__OhMhC\"};","import React from 'react'\r\nimport s from \"./User.module.css\";\r\nimport userPhoto from \"../../../Images/flat-face-icon-23.png\";\r\nimport {NavLink} from \"react-router-dom\";\r\nimport {UsersType} from \"../../../Redux/users-reducer\";\r\n\r\nexport const User = ({user, followingInProgress, unfollow, follow}: UsersPropsType) => {\r\n\r\n    return (\r\n\r\n        <div className={s.user}>\r\n\r\n            <div className={s.userInfo}>\r\n                <NavLink to={'/profile/' + user.id}>\r\n                    <img src={user.photos.small !== null ? user.photos.small : userPhoto} className={s.userPhoto}\r\n                         alt={\"userPhoto\"}/>\r\n                </NavLink>\r\n                <span className={s.userName}>{user.name}</span>\r\n            <span className={s.userStatus}>{user.status}</span>\r\n            </div>\r\n\r\n            <div>\r\n                {\r\n                    user.followed\r\n                        ? <button\r\n                            className={s.unFollowBtn}\r\n                            disabled={followingInProgress.some(id => id === user.id)}\r\n                            onClick={() => {\r\n                                unfollow(user.id)\r\n                            }}>unFollow</button>\r\n\r\n                        : <button\r\n                            className={s.followBtn}\r\n                            disabled={followingInProgress.some(id => id === user.id)}\r\n                            onClick={() => {\r\n                                debugger\r\n                                follow(user.id)\r\n                            }}>Follow</button>\r\n                }\r\n            </div>\r\n\r\n\r\n        </div>\r\n    )\r\n}\r\n\r\n//Types\r\ntype UsersPropsType = {\r\n    user: UsersType\r\n    unfollow: (userID: number) => void\r\n    follow: (userID: number) => void\r\n    followingInProgress: Array<number>\r\n}","// extracted by mini-css-extract-plugin\nexport default {\"usersPage\":\"Users_usersPage__dWc9b\",\"usersContainer\":\"Users_usersContainer__cTge6\",\"users\":\"Users_users__au+hV\"};","import {AppStateType} from \"../redux-store\";\r\nimport {createSelector} from \"reselect\";\r\n\r\nconst getUsersSelector = (state: AppStateType) => {\r\n    return state.usersPage.users\r\n}\r\nexport const getUsers = createSelector(getUsersSelector, (users) => {\r\n    return users.filter(u => true) // фэйковая фильтрация для примера\r\n})\r\nexport const getPageSize = (state: AppStateType) => {\r\n    return state.usersPage.pageSize;\r\n}\r\nexport const getTotalUsersCount = (state: AppStateType) => {\r\n    return state.usersPage.totalUsersCount;\r\n}\r\nexport const getPage = (state: AppStateType) => {\r\n    return state.usersPage.page;\r\n}\r\nexport const getIsFetching = (state: AppStateType) => {\r\n    return state.usersPage.isFetching;\r\n}\r\nexport const getFollowingInProgress = (state: AppStateType) => {\r\n    return state.usersPage.followingInProgress;\r\n}\r\nexport const getUsersFilter = (state: AppStateType) => {\r\n    return state.usersPage.filter;\r\n}","// extracted by mini-css-extract-plugin\nexport default {\"formContainer\":\"UsersSearchForm_formContainer__gLU6c\",\"searchInput\":\"UsersSearchForm_searchInput__k3NZU\",\"select\":\"UsersSearchForm_select__cHkbo\"};","import {Field, Form, Formik} from \"formik\";\r\nimport React from \"react\";\r\nimport {FilterType} from \"../../../Redux/users-reducer\";\r\nimport {useSelector} from \"react-redux\";\r\nimport {AppStateType} from \"../../../Redux/redux-store\";\r\nimport {getUsersFilter} from \"../../../Redux/Selectors/users-selectors\";\r\nimport s from \"./UsersSearchForm.module.css\"\r\n\r\nconst usersSearchFormValidate = (values: FormType) => {\r\n    const errors = {};\r\n    return errors;\r\n}\r\n\r\nexport const UsersSearchForm: React.FC<PropsType> = React.memo((props) => {\r\n\r\n    const filter = useSelector<AppStateType, FilterType>(getUsersFilter)\r\n\r\n    const submit = (values: FormType, {setSubmitting}: { setSubmitting: (isSubmitting: boolean) => void }) => {\r\n        const filter: FilterType = {\r\n            term: values.term,\r\n            friend: values.friend === \"null\" ? null : values.friend === \"true\"\r\n        }\r\n        props.onFilterChanged(filter)\r\n        setSubmitting(false)\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <Formik\r\n                enableReinitialize\r\n                initialValues={{term: filter.term, friend: String(filter.friend) as FriendFormType}}\r\n                validate={usersSearchFormValidate}\r\n                onSubmit={submit}\r\n            >\r\n                {({isSubmitting}) => (\r\n                    <Form className={s.formContainer}>\r\n                        <Field type=\"text\" name=\"term\" placeholder={\"Search 🔎\"} className={s.searchInput}/>\r\n                        <Field name=\"friend\" as=\"select\" className={s.select}>\r\n                            <option value=\"null\">All</option>\r\n                            <option value=\"true\">Followed</option>\r\n                            <option value=\"false\">Unfollowed</option>\r\n                        </Field>\r\n                        <button type=\"submit\" disabled={isSubmitting}>\r\n                            Search\r\n                        </button>\r\n                    </Form>\r\n                )}\r\n            </Formik>\r\n        </div>\r\n    )\r\n})\r\n\r\n// TYPES\r\ntype PropsType = {\r\n    onFilterChanged: (filter: FilterType) => void\r\n}\r\ntype FriendFormType = 'true' | 'false' | 'null'\r\ntype FormType = {\r\n    term: string,\r\n    friend: FriendFormType\r\n}\r\n\r\n\r\n","import React, {FC, useEffect} from 'react'\r\nimport {FilterType, follow, requestUsers, unfollow, UsersType} from \"../../Redux/users-reducer\";\r\nimport {Paginator} from \"../Common/Paginator/Paginator\";\r\nimport {User} from \"./User/User\";\r\nimport s from \"./Users.module.css\"\r\nimport {UsersSearchForm} from \"./UsersSearchForm/UsersSearchForm\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {\r\n    getFollowingInProgress,\r\n    getPage,\r\n    getPageSize,\r\n    getTotalUsersCount,\r\n    getUsers,\r\n    getUsersFilter\r\n} from \"../../Redux/Selectors/users-selectors\";\r\nimport {useNavigate, useSearchParams} from \"react-router-dom\";\r\n\r\n\r\nexport const Users: FC<UsersPropsType> = React.memo((props) => {\r\n\r\n    const dispatch = useDispatch()\r\n    const navigate = useNavigate()\r\n    const [searchParams, setSearchParams] = useSearchParams()\r\n\r\n    const parsedPage = searchParams.get('page')\r\n    const parsedTerm = searchParams.get('term')\r\n    const parsedFriend = searchParams.get('friend')\r\n\r\n\r\n    const pageSize = useSelector(getPageSize)\r\n    const users = useSelector(getUsers)\r\n    const totalUsersCount = useSelector(getTotalUsersCount)\r\n    const currentPage = useSelector(getPage)\r\n    const filter = useSelector(getUsersFilter)\r\n    const followingInProgress = useSelector(getFollowingInProgress)\r\n\r\n\r\n    const onPageChanged = (pageNumber: number) => {\r\n        dispatch(requestUsers(pageNumber, pageSize, filter))\r\n    }\r\n    const onFilterChanged = (filter: FilterType) => {\r\n        dispatch(requestUsers(1, pageSize, filter))\r\n    }\r\n    const onFollow = (userID: number) => {\r\n        debugger\r\n        dispatch(follow(userID))\r\n    }\r\n    const onUnfollow = (userID: number) => {\r\n        dispatch(unfollow(userID))\r\n    }\r\n\r\n    useEffect(() => {\r\n        let actualPage = currentPage\r\n        let actualFilter = filter\r\n\r\n        if (!!parsedPage) actualPage = Number(parsedPage)\r\n        if (!!parsedTerm) actualFilter = {...actualFilter, term: parsedTerm as string}\r\n        switch (parsedFriend) {\r\n            case \"null\" :\r\n                actualFilter = {...actualFilter, friend: null}\r\n                break\r\n            case \"true\" :\r\n                actualFilter = {...actualFilter, friend: true}\r\n                break\r\n            case \"false\" :\r\n                actualFilter = {...actualFilter, friend: false}\r\n                break\r\n        }\r\n\r\n        dispatch(requestUsers(actualPage, pageSize, actualFilter))\r\n    }, [])\r\n\r\n    useEffect(() => {\r\n        const query = {} as queryParamsType\r\n\r\n        if (!!parsedTerm) query.term = parsedTerm\r\n        if (currentPage !== 1) query.page = String(currentPage)\r\n        if (parsedFriend !== null) query.friend = String(parsedFriend)\r\n\r\n        navigate(`?term=${filter.term}&friend=${filter.friend}&page=${currentPage}`)\r\n    }, [filter, currentPage])\r\n\r\n\r\n    return (\r\n\r\n        <div className={s.usersPage}>\r\n\r\n            <UsersSearchForm onFilterChanged={onFilterChanged}/>\r\n\r\n\r\n            <div className={s.usersContainer}>\r\n                <div className={s.users}>\r\n                    {users.map(u => <User user={u}\r\n                                          unfollow={onUnfollow}\r\n                                          follow={onFollow}\r\n                                          followingInProgress={followingInProgress}\r\n                                          key={u.id}/>\r\n                    )}\r\n                </div>\r\n            </div>\r\n            <Paginator\r\n                totalItemsCount={totalUsersCount}\r\n                pageSize={pageSize}\r\n                currentPage={currentPage}\r\n                onPageChanged={onPageChanged}\r\n                portionSize={10}\r\n            />\r\n        </div>\r\n    )\r\n})\r\n\r\n\r\n//Types\r\ntype UsersPropsType = {}\r\ntype queryParamsType = {\r\n    term: string\r\n    page: string\r\n    friend: string\r\n}\r\n","import React from 'react'\r\nimport {useSelector} from 'react-redux';\r\nimport {Users} from './Users';\r\nimport {Preloader} from \"../Common/Preloader/Preloader\";\r\nimport {getIsFetching} from \"../../Redux/Selectors/users-selectors\";\r\nimport {AppStateType} from \"../../Redux/redux-store\";\r\nimport {Navigate} from \"react-router-dom\";\r\n\r\n\r\nconst UsersPage: React.FC<UsersPropsType> = (props) => {\r\n\r\nconst isFetching = useSelector(getIsFetching)\r\n    const isAuth = useSelector<AppStateType, boolean>(state => state.auth.isAuth)\r\n\r\n    if (!isAuth) {\r\n        return <Navigate to='/login'/>\r\n    }\r\n    return (\r\n            <>\r\n                {isFetching ? <Preloader/> : null}\r\n                <Users/>\r\n            </>\r\n        )\r\n}\r\n// TYPES\r\ntype UsersPropsType = {}\r\n\r\nexport default UsersPage\r\n\r\n"],"names":["Paginator","totalItemsCount","pageSize","currentPage","onPageChanged","portionSize","pagesCount","Math","ceil","pages","i","push","portionCount","useState","portionNumber","setPortionNumber","leftPortionPageNumber","rightPortionPageNumber","className","s","onClick","filter","p","map","e","User","user","followingInProgress","unfollow","follow","to","id","src","photos","small","userPhoto","alt","name","status","followed","disabled","some","getUsers","createSelector","state","usersPage","users","u","getPageSize","getTotalUsersCount","totalUsersCount","getPage","page","getIsFetching","isFetching","getFollowingInProgress","getUsersFilter","usersSearchFormValidate","values","UsersSearchForm","React","props","useSelector","enableReinitialize","initialValues","term","friend","String","validate","onSubmit","setSubmitting","onFilterChanged","isSubmitting","type","placeholder","as","value","Users","dispatch","useDispatch","navigate","useNavigate","useSearchParams","searchParams","parsedPage","get","parsedTerm","parsedFriend","onFollow","userID","onUnfollow","useEffect","actualPage","actualFilter","Number","requestUsers","query","pageNumber","auth","isAuth","Preloader"],"sourceRoot":""}