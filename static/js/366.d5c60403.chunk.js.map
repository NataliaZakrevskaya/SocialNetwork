{"version":3,"file":"static/js/366.d5c60403.chunk.js","mappings":"sOASMA,EAA6B,SAACC,GAChC,MAAO,CACHC,OAAQD,EAAME,KAAKD,SAKpB,SAASE,EAAoBC,GAahC,OAAOC,EAAAA,EAAAA,IAAQN,EAARM,EAZmB,SAACC,GAEvB,IAAOL,EAAwBK,EAAxBL,OAAWM,GAAlB,OAA+BD,EAA/B,GAEA,OAAKL,GAIE,SAACG,GAAD,UAAsBG,KAHlB,SAAC,KAAD,CAAUC,GAAG,gB,gFCrBhC,G,QAAA,CAAgB,YAAc,6BAA6B,QAAU,yBAAyB,OAAS,wBAAwB,UAAY,2BAA2B,aAAe,8BAA8B,SAAW,0BAA0B,QAAU,yBAAyB,eAAiB,gCAAgC,UAAY,6B,6BCsBxV,EAZmB,SAACF,GAChB,IAAIG,EAAO,YAAcH,EAAMI,GAC/B,OACI,iBAAKC,UAAWC,EAAAA,OAAW,IAAMA,EAAAA,OAAjC,WACI,gBAAKD,UAAWC,EAAAA,UACXC,IAAKC,EACLC,IAAK,wBACV,SAAC,KAAD,CAASP,GAAIC,EAAb,SAAoBH,EAAMU,WCEtC,EAZgB,SAACV,GAEb,OACI,0BACI,0BACI,gBAAKK,UAAWC,EAAAA,QAAhB,SAA4BN,EAAMW,e,uCCF5CC,GAAcC,EAAAA,EAAAA,GAAiB,IAqBxBC,GAAsBC,EAAAA,EAAAA,GAA8B,CAACC,KAAM,wBAArCD,EAnB4C,SAACf,GAC5E,OACI,kBAAMiB,SAAUjB,EAAMkB,aAAcb,UAAWC,EAAAA,eAA/C,WACI,0BACI,SAACa,EAAA,EAAD,CACIC,UAAWC,EAAAA,GACXX,KAAM,iBACNY,YAAa,qBACbC,SAAU,CAACC,EAAAA,EAAUZ,GACrBP,UAAWC,EAAAA,eAGnB,0BACI,6CCQhB,EA1BgB,SAACN,GAEb,IAAMN,EAAQM,EAAMyB,YACdC,EAAkBhC,EAAMiC,QAAQC,KAAI,SAAAC,GAAC,OAAI,SAAC,EAAD,CAAYnB,KAAMmB,EAAEnB,KAAiBN,GAAIyB,EAAEzB,IAAZyB,EAAEzB,OAC1E0B,EAAmBpC,EAAMqC,SAASH,KAAI,SAAAI,GAAC,OAAI,SAAC,EAAD,CAAoB5B,GAAI4B,EAAE5B,GAAIO,QAASqB,EAAErB,SAA3BqB,EAAE5B,OAMjE,OACI,iBAAKC,UAAWC,EAAAA,YAAhB,WACI,iBAAKD,UAAWC,EAAAA,QAAhB,WACI,gBAAKD,UAAWC,EAAAA,aAAhB,SACKoB,KAEL,gBAAKrB,UAAWC,EAAAA,SAAhB,SACKwB,QAGT,SAAChB,EAAD,CAAqBG,SAdP,SAACgB,GACnBjC,EAAMkC,YAAYD,EAAOE,uB,6BCiBjC,GAAeC,EAAAA,EAAAA,KACXrC,EAAAA,EAAAA,KAfoB,SAACL,GACrB,MAAO,CACH+B,YAAa/B,EAAM2C,iBAGA,SAACC,GACxB,MAAO,CACHJ,YAAa,SAACC,GACVG,GAASJ,EAAAA,EAAAA,GAAYC,SAS7BtC,EAAAA,EAHJ,CAKC0C,I","sources":["HOC/WithAuthRedirect.tsx","webpack://social_network_ts/./src/components/Dialogs/Dialogs.module.css?1b2e","components/Dialogs/DialogItem/DialogItem.tsx","components/Dialogs/Message/Message.tsx","components/Dialogs/AddMessageFormRedux.tsx","components/Dialogs/Dialogs.tsx","components/Dialogs/DialogsContainer.tsx"],"sourcesContent":["import React from \"react\";\r\nimport {connect} from \"react-redux\";\r\nimport {AppStateType} from \"../Redux/redux-store\";\r\nimport {Navigate} from \"react-router-dom\";\r\n\r\ntype MapStateToPropsType = {\r\n    isAuth: boolean\r\n}\r\n\r\nconst mapStateToPropsForRedirect = (state: AppStateType): MapStateToPropsType => {\r\n    return {\r\n        isAuth: state.auth.isAuth\r\n    }\r\n}\r\n\r\n\r\nexport function WithAuthRedirect<T>(WrappedComponent: React.ComponentType<T>) {\r\n    const RedirectComponent = (props: MapStateToPropsType) => {\r\n\r\n        const {isAuth, ...restProps} = props;\r\n\r\n        if (!isAuth) {\r\n            return <Navigate to='/login'/>\r\n        }\r\n\r\n        return <WrappedComponent {...restProps as T}/>\r\n    }\r\n\r\n\r\n    return connect(mapStateToPropsForRedirect)(RedirectComponent);\r\n}\r\n\r\n","// extracted by mini-css-extract-plugin\nexport default {\"dialogsPage\":\"Dialogs_dialogsPage__UVfNu\",\"dialogs\":\"Dialogs_dialogs__rnZdM\",\"dialog\":\"Dialogs_dialog__mKYrY\",\"dialogImg\":\"Dialogs_dialogImg__IxzTb\",\"dialogsItems\":\"Dialogs_dialogsItems__fojws\",\"messages\":\"Dialogs_messages__dsWpb\",\"message\":\"Dialogs_message__Nh7CW\",\"addMessageForm\":\"Dialogs_addMessageForm__iqx6U\",\"textField\":\"Dialogs_textField__Qa3j+\"};","import React from 'react'\r\nimport s from './../Dialogs.module.css'\r\nimport {NavLink} from \"react-router-dom\";\r\nimport dialogProfileImg from './dilaogProfileImg.png'\r\n\r\ntype DialogsType = {\r\n    name?: string\r\n    id?: number\r\n}\r\n\r\n\r\nconst DialogItem = (props: DialogsType) => {\r\n    let path = \"/dialogs/\" + props.id;\r\n    return (\r\n        <div className={s.dialog + ' ' + s.active}>\r\n            <img className={s.dialogImg}\r\n                 src={dialogProfileImg}\r\n                 alt={\"dialogProfilePhoto\"}/>\r\n            <NavLink to={path}>{props.name}</NavLink>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default DialogItem;","import React from 'react'\r\nimport s from './../Dialogs.module.css'\r\n\r\ntype MessageType = {\r\n    id: number\r\n    message: string\r\n}\r\n\r\nconst Message = (props: MessageType) => {\r\n\r\n    return (\r\n        <div>\r\n            <div>\r\n                <div className={s.message}>{props.message}</div>\r\n            </div>\r\n\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Message;","import React from \"react\";\r\nimport {InjectedFormProps} from \"redux-form/lib/reduxForm\";\r\nimport s from \"./Dialogs.module.css\";\r\nimport {Field, reduxForm} from \"redux-form\";\r\nimport {Textarea} from \"../Common/FormsControls/FormsControls\";\r\nimport {maxLengthCreator, required} from \"../../Utils/Validators/Validators\";\r\n\r\ntype DialogFormDataType = {\r\n    newMessageBody: string\r\n}\r\n\r\nconst maxLength50 = maxLengthCreator(50);\r\n\r\nexport const AddMessageForm: React.FC<InjectedFormProps<DialogFormDataType>> = (props) => {\r\n    return (\r\n        <form onSubmit={props.handleSubmit} className={s.addMessageForm}>\r\n            <div>\r\n                <Field\r\n                    component={Textarea}\r\n                    name={\"newMessageBody\"}\r\n                    placeholder={\"Enter your message\"}\r\n                    validate={[required, maxLength50]}\r\n                    className={s.textField}\r\n                />\r\n            </div>\r\n            <div>\r\n                <button>Send</button>\r\n            </div>\r\n        </form>\r\n    )\r\n}\r\n\r\nexport const AddMessageFormRedux = reduxForm<DialogFormDataType>({form: \"dialogAddMessageForm\"})(AddMessageForm)\r\n","import React from 'react'\r\nimport s from './Dialogs.module.css'\r\nimport DialogItem from \"./DialogItem/DialogItem\";\r\nimport Message from \"./Message/Message\";\r\nimport {DialogsPropsType} from \"./DialogsContainer\";\r\nimport {AddMessageFormRedux} from \"./AddMessageFormRedux\";\r\n\r\n\r\nconst Dialogs = (props: DialogsPropsType) => {\r\n\r\n    const state = props.dialogsPage;\r\n    const dialogsElements = state.dialogs.map(d => <DialogItem name={d.name} key={d.id} id={d.id}/>);\r\n    const messagesElements = state.messages.map(m => <Message key={m.id} id={m.id} message={m.message}/>)\r\n\r\n    const addNewMessage = (values: any) => {\r\n        props.sendMessage(values.newMessageBody);\r\n    };\r\n\r\n    return (\r\n        <div className={s.dialogsPage}>\r\n            <div className={s.dialogs}>\r\n                <div className={s.dialogsItems}>\r\n                    {dialogsElements}\r\n                </div>\r\n                <div className={s.messages}>\r\n                    {messagesElements}\r\n                </div>\r\n            </div>\r\n            <AddMessageFormRedux onSubmit={addNewMessage}/>\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\nexport default Dialogs;","import React, {ComponentType} from 'react'\r\nimport {InitialStateType, sendMessage} from \"../../Redux/dialogs-reducer\";\r\nimport Dialogs from \"./Dialogs\";\r\nimport {connect} from \"react-redux\";\r\nimport {compose, Dispatch} from \"redux\";\r\nimport {AppStateType} from \"../../Redux/redux-store\";\r\nimport {WithAuthRedirect} from \"../../HOC/WithAuthRedirect\";\r\n\r\n\r\ntype MapStateToPropsType = {\r\n    dialogsPage: InitialStateType\r\n}\r\ntype MapDispatchToPropsType = {\r\n    sendMessage: (newMessageBody: string) => void\r\n}\r\nexport type DialogsPropsType = MapStateToPropsType & MapDispatchToPropsType\r\n\r\n\r\nconst mapStateToProps = (state: AppStateType): MapStateToPropsType => {\r\n    return {\r\n        dialogsPage: state.messagesPage\r\n    };\r\n};\r\nconst mapDispatchToProps = (dispatch: Dispatch): MapDispatchToPropsType => {\r\n    return {\r\n        sendMessage: (newMessageBody: string) => {\r\n            dispatch(sendMessage(newMessageBody));\r\n        }\r\n    }\r\n}\r\n\r\n\r\nexport default compose<ComponentType>(\r\n    connect\r\n    (mapStateToProps, mapDispatchToProps),\r\n    WithAuthRedirect\r\n)\r\n(Dialogs);"],"names":["mapStateToPropsForRedirect","state","isAuth","auth","WithAuthRedirect","WrappedComponent","connect","props","restProps","to","path","id","className","s","src","dialogProfileImg","alt","name","message","maxLength50","maxLengthCreator","AddMessageFormRedux","reduxForm","form","onSubmit","handleSubmit","Field","component","Textarea","placeholder","validate","required","dialogsPage","dialogsElements","dialogs","map","d","messagesElements","messages","m","values","sendMessage","newMessageBody","compose","messagesPage","dispatch","Dialogs"],"sourceRoot":""}