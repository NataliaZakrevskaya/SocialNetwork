{"version":3,"file":"static/js/959.0c58accf.chunk.js","mappings":"kNACA,EAA2B,2BAA3B,EAAqE,+BAArE,EAA8G,0BAA9G,EAA4J,oCAA5J,EAA8M,8BAA9M,EAAiQ,qCAAjQ,EAAkT,4B,4BCKrSA,EAAsDC,EAAAA,MAAW,YAAgB,IAAdC,EAAa,EAAbA,QAC5E,OACI,iBAAKC,UAAWC,EAAhB,WACI,iBAAKD,UAAWC,EAAhB,WACI,SAAC,KAAD,CAASC,GAAI,YAAcH,EAAQI,OAAnC,UACA,gBACIC,IAAuB,OAAlBL,EAAQM,MAAiBN,EAAQM,MAAQC,EAC9CC,IAAK,kBAGT,0BAAOR,EAAQS,eAGnB,iBAAMR,UAAWC,EAAjB,SAAiCF,EAAQA,gBCZxCU,EAAqB,WAE9B,IAAMC,GAAWC,EAAAA,EAAAA,KAA6C,SAAAC,GAAK,OAAIA,EAAMC,KAAKH,YAC5EI,GAAoBC,EAAAA,EAAAA,QAAuB,MACjD,GAAwCC,EAAAA,EAAAA,WAAkB,GAA1D,eAAOC,EAAP,KAAqBC,EAArB,KAgBA,OANAC,EAAAA,EAAAA,YAAU,WACa,IAAD,EAAdF,IACA,UAAAH,EAAkBM,eAAlB,SAA2BC,eAAe,CAACC,SAAU,cAE1D,CAACZ,KAGA,iBAAKV,UAAWC,EAAgBsB,MAAO,CAACC,OAAQ,QAASC,UAAW,QAASC,SAhB3D,SAACC,GACnB,IAAMC,EAAUD,EAAEE,cACdC,KAAKC,IAAKH,EAAQI,aAAeJ,EAAQK,UAAaL,EAAQM,cAAgB,KAC7EjB,GAAgBC,GAAgB,GAEjCD,GAAgBC,GAAgB,IAWpC,UACKR,EAASyB,KAAI,SAACC,EAAGC,GAAJ,OAAc,SAACxC,EAAD,CAAwBE,QAASqC,GAAfA,EAAEE,QAChD,gBAAKC,IAAKzB,QCvBT0B,EAA+B,WACxC,OAA8BxB,EAAAA,EAAAA,UAAS,IAAvC,eAAOjB,EAAP,KAAgB0C,EAAhB,KACMC,GAAWC,EAAAA,EAAAA,MACXC,GAASjC,EAAAA,EAAAA,KAAsC,SAAAC,GAAK,OAAIA,EAAMC,KAAK+B,UASzE,OACI,iBAAK5C,UAAWC,EAAhB,WAEQ,qBAAU4C,SAAU,SAAClB,GAAD,OAAOc,EAAWd,EAAEE,cAAciB,QAC5CA,MAAO/C,EACPC,UAAWC,EACX8C,YAAa,2BAEvB,mBACIC,SAAqB,UAAXJ,EACVK,QAhBW,WAClBlD,IACL2C,GAASQ,EAAAA,EAAAA,IAAYnD,IACrB0C,EAAW,MAWH,sBCnBHU,EAAiB,WAE1B,IAAMT,GAAWC,EAAAA,EAAAA,MACXC,GAASjC,EAAAA,EAAAA,KAAsC,SAAAC,GAAK,OAAIA,EAAMC,KAAK+B,UAWzE,OATAzB,EAAAA,EAAAA,YAAU,WAGN,OADAuB,GAASU,EAAAA,EAAAA,OACF,WACHV,GAASW,EAAAA,EAAAA,UAGd,KAGC,2BACgB,UAAXT,IAAsB,4EACvB,iCACI,SAACnC,EAAD,KACA,SAAC+B,EAAD,W,UCLhB,EAf2B,WAIvB,OAFc7B,EAAAA,EAAAA,KAAmC,SAAAC,GAAK,OAAIA,EAAM0C,KAAKC,WAMjE,gBAAKvD,UAAWC,EAAhB,UACI,SAACkD,EAAD,OAJG,SAAC,KAAD,CAAUjD,GAAG","sources":["webpack://social_network_ts/./src/Pages/ChatPage/ChatPage.module.css?b94f","Pages/ChatPage/Chat/Messages/ChatMessage.tsx","Pages/ChatPage/Chat/Messages/Messages.tsx","Pages/ChatPage/Chat/Messages/AddChatMessageForm.tsx","Pages/ChatPage/Chat/Chat.tsx","Pages/ChatPage/ChatPage.tsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"chatPage\":\"ChatPage_chatPage__LWka6\",\"messagesPart\":\"ChatPage_messagesPart__0602g\",\"message\":\"ChatPage_message__d9wql\",\"userInfoContainer\":\"ChatPage_userInfoContainer__Nb175\",\"messageText\":\"ChatPage_messageText__ZQ40A\",\"addChatMessageForm\":\"ChatPage_addChatMessageForm__5MwLq\",\"textField\":\"ChatPage_textField__gRx01\"};","import React from \"react\";\r\nimport {ChatMessageType} from \"../../../../Redux/chat-reducer\";\r\nimport s from \"./../../ChatPage.module.css\";\r\nimport userDefaultPhoto from \"./../../../../Images/flat-face-icon-23.png\"\r\nimport {NavLink} from \"react-router-dom\";\r\n\r\nexport const ChatMessage: React.FC<{ message: ChatMessageType }> = React.memo(({message}) => {\r\n    return (\r\n        <div className={s.message}>\r\n            <div className={s.userInfoContainer}>\r\n                <NavLink to={'/profile/' + message.userId}>\r\n                <img\r\n                    src={message.photo !== null ? message.photo : userDefaultPhoto}\r\n                    alt={'user image'}\r\n                />\r\n                </NavLink>\r\n                <span>{message.userName}</span>\r\n\r\n            </div>\r\n            <span className={s.messageText}>{message.message}</span>\r\n        </div>\r\n    )\r\n})","import React, {useEffect, useRef, useState} from \"react\";\r\nimport {useSelector} from \"react-redux\";\r\nimport {AppStateType} from \"../../../../Redux/redux-store\";\r\nimport {ChatMessageType} from \"../../../../Redux/chat-reducer\";\r\nimport {ChatMessage} from \"./ChatMessage\";\r\nimport s from \"./../../ChatPage.module.css\";\r\n\r\nexport const Messages: React.FC = () => {\r\n\r\n    const messages = useSelector<AppStateType, ChatMessageType[]>(state => state.chat.messages)\r\n    const messagesAnchorRef = useRef<HTMLDivElement>(null)\r\n    const [isAutoScroll, setIsAutoScroll] = useState<boolean>(false)\r\n    const scrollHandler = (e: React.UIEvent<HTMLDivElement, UIEvent>) => {\r\n        const element = e.currentTarget\r\n        if (Math.abs((element.scrollHeight - element.scrollTop) - element.clientHeight) < 300) {\r\n            !isAutoScroll && setIsAutoScroll(true)\r\n        } else {\r\n            isAutoScroll && setIsAutoScroll(false)\r\n        }\r\n    }\r\n\r\n    useEffect(() => {\r\n        if (isAutoScroll) {\r\n            messagesAnchorRef.current?.scrollIntoView({behavior: 'smooth'})\r\n        }\r\n    }, [messages])\r\n\r\n    return (\r\n        <div className={s.messagesPart} style={{height: '400px', overflowY: 'auto'}} onScroll={scrollHandler}>\r\n            {messages.map((m, index) => <ChatMessage key={m.id} message={m}/>)}\r\n            <div ref={messagesAnchorRef}></div>\r\n        </div>\r\n    )\r\n}\r\n","import React, {useState} from \"react\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {AppStateType} from \"../../../../Redux/redux-store\";\r\nimport {StatusType} from \"../../../../api/chat-api\";\r\nimport {sendMessage} from \"../../../../Redux/chat-reducer\";\r\nimport s from \"../../ChatPage.module.css\";\r\n\r\nexport const AddChatMessageForm: React.FC = () => {\r\n    const [message, setMessage] = useState('')\r\n    const dispatch = useDispatch()\r\n    const status = useSelector<AppStateType, StatusType>(state => state.chat.status)\r\n\r\n\r\n    const sendMessageHandler = () => {\r\n        if (!message) return\r\n        dispatch(sendMessage(message))\r\n        setMessage('')\r\n    }\r\n\r\n    return (\r\n        <div className={s.addChatMessageForm}>\r\n\r\n                <textarea onChange={(e) => setMessage(e.currentTarget.value)}\r\n                          value={message}\r\n                          className={s.textField}\r\n                          placeholder={'Write your message...'}\r\n                ></textarea>\r\n                <button\r\n                    disabled={status !== 'ready'}\r\n                    onClick={sendMessageHandler}\r\n                >Send</button>\r\n\r\n        </div>\r\n    )\r\n}","import React, {useEffect} from \"react\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {AppStateType} from \"../../../Redux/redux-store\";\r\nimport {StatusType} from \"../../../api/chat-api\";\r\nimport {startMessagesListening, stopMessagesListening} from \"../../../Redux/chat-reducer\";\r\nimport {Messages} from \"./Messages/Messages\";\r\nimport {AddChatMessageForm} from \"./Messages/AddChatMessageForm\";\r\n\r\nexport const Chat: React.FC = () => {\r\n\r\n    const dispatch = useDispatch()\r\n    const status = useSelector<AppStateType, StatusType>(state => state.chat.status)\r\n\r\n    useEffect(() => {\r\n\r\n        dispatch(startMessagesListening())\r\n        return () => {\r\n            dispatch(stopMessagesListening())\r\n        }\r\n\r\n    }, [])\r\n\r\n    return (\r\n        <div>\r\n            {status === 'error' && <div>Some error occurred. Please, refresh the page</div>}\r\n            <>\r\n                <Messages/>\r\n                <AddChatMessageForm/>\r\n            </>\r\n\r\n        </div>\r\n    )\r\n}","import React from \"react\";\r\nimport {Chat} from \"./Chat/Chat\";\r\nimport s from \"./ChatPage.module.css\";\r\nimport {Navigate} from \"react-router-dom\";\r\nimport {useSelector} from \"react-redux\";\r\nimport {AppStateType} from \"../../Redux/redux-store\";\r\n\r\nconst ChatPage: React.FC = () => {\r\n\r\n   const isAuth = useSelector<AppStateType, boolean>(state => state.auth.isAuth)\r\n\r\n    if (!isAuth) {\r\n        return <Navigate to='/login'/>\r\n    }\r\n    return (\r\n        <div className={s.chatPage}>\r\n            <Chat/>\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\nexport default ChatPage;"],"names":["ChatMessage","React","message","className","s","to","userId","src","photo","userDefaultPhoto","alt","userName","Messages","messages","useSelector","state","chat","messagesAnchorRef","useRef","useState","isAutoScroll","setIsAutoScroll","useEffect","current","scrollIntoView","behavior","style","height","overflowY","onScroll","e","element","currentTarget","Math","abs","scrollHeight","scrollTop","clientHeight","map","m","index","id","ref","AddChatMessageForm","setMessage","dispatch","useDispatch","status","onChange","value","placeholder","disabled","onClick","sendMessage","Chat","startMessagesListening","stopMessagesListening","auth","isAuth"],"sourceRoot":""}